package com.example.handlers;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import com.example.CsvToPropertyReader;
import com.example.Property;
import com.example.utils.PropertyGeometryUtils;
import com.example.utils.PropertyMergeUtils;

/**
 * AreaButtonHandler handles the action when the "Area" button is clicked.
 * This class allows the user to select the type of area and view details accordingly.
 */
public class AreaButtonHandler implements ActionListener {

    private JPanel panel;
    private List<Property> properties;

    /**
     * Constructor for AreaButtonHandler.
     *
     * @param panel The panel that contains the button.
     * @param properties The list of properties loaded from the CSV file.
     */
    public AreaButtonHandler(JPanel panel, List<Property> properties) {
        this.panel = panel;
        this.properties = properties;
    }

    /**
     * Action performed when the "Area" button is clicked.
     *
     * @param e The ActionEvent object generated by the button click.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        // First question: type of land
        int terrainOption = JOptionPane.showOptionDialog(
                panel,
                "What type of land would you like to see?",
                "Land Type Selection",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new Object[]{"Normal", "Merged"},
                "Normal"
        );

        if (terrainOption == JOptionPane.CLOSED_OPTION) {
            return;
        }

        boolean isMerged = (terrainOption == JOptionPane.NO_OPTION);

        // Second question: type of area
        int zoneOption = JOptionPane.showOptionDialog(
                panel,
                "What type of area would you like to see?",
                "Area Type Selection",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new Object[]{"Freguesia", "Municipio", "Ilha"},
                "Freguesia"
        );

        if (zoneOption == JOptionPane.CLOSED_OPTION) {
            return; // If the dialog is closed, end the flow
        }

        switch (zoneOption) {
            case JOptionPane.YES_OPTION: // Freguesia
                Set<String> uniqueFreguesias = properties.stream().map(Property::getFreguesia).collect(Collectors.toSet());
                String freguesiaInput = (String) JOptionPane.showInputDialog(
                        panel,
                        "Select a Freguesia:",
                        "Freguesia Selection",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        uniqueFreguesias.toArray(),
                        uniqueFreguesias.iterator().next()
                );

                if (freguesiaInput != null) {
                    if (isMerged) {
                        List<Property> mergedProperties = PropertyMergeUtils.mergePropertiesByAdjacencyAndOwner(CsvToPropertyReader.filterPropertiesByFreguesia(properties, freguesiaInput));
                        showMergedAreaTable("freguesia", freguesiaInput, mergedProperties);
                    } else {
                        showAreaTable("freguesia", freguesiaInput);
                    }
                }
                break;

            case JOptionPane.NO_OPTION: // Municipio
                Set<String> uniqueMunicipios = properties.stream().map(Property::getMunicipio).collect(Collectors.toSet());
                String municipioInput = (String) JOptionPane.showInputDialog(
                        panel,
                        "Select a Municipio:",
                        "Municipio Selection",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        uniqueMunicipios.toArray(),
                        uniqueMunicipios.iterator().next()
                );

                if (municipioInput != null) {
                    if (isMerged) {
                        List<Property> mergedProperties = PropertyMergeUtils.mergePropertiesByAdjacencyAndOwner(CsvToPropertyReader.filterPropertiesByMunicipio(properties, municipioInput));
                        showMergedAreaTable("municipio", municipioInput, mergedProperties);
                    } else {
                        showAreaTable("municipio", municipioInput);
                    }
                }
                break;

            case JOptionPane.CANCEL_OPTION: // Ilha
                if (isMerged) {
                    List<Property> mergedProperties = PropertyMergeUtils.mergePropertiesByAdjacencyAndOwner(CsvToPropertyReader.filterPropertiesByIlha(properties, "Ilha da Madeira (Madeira)"));
                    showMergedAreaTable("ilha", "Ilha da Madeira (Madeira)", mergedProperties);
                } else {
                    showAreaTable("ilha", "Ilha da Madeira (Madeira)");
                }
                break;
            }
     }
    // Helper Methods for Display Actions

    /**
     * Displays a table with area details for the selected location.
     *
     * @param areaType The type of area (freguesia, municipio, ilha).
     * @param location The location name.
     */
    private void showAreaTable(String areaType, String location) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("Location");
        tableModel.addColumn("Total Area (m²)");
        tableModel.addColumn("Average Area (m²)");

        List<Property> filteredProperties = properties.stream()
                .filter(p -> {
                    switch (areaType) {
                        case "freguesia":
                            return p.getFreguesia().equalsIgnoreCase(location);
                        case "municipio":
                            return p.getMunicipio().equalsIgnoreCase(location);
                        case "ilha":
                            return p.getIlha().equalsIgnoreCase(location);
                        default:
                            return false;
                    }
                })
                .collect(Collectors.toList());

        double totalArea = filteredProperties.stream()
                .mapToDouble(p -> Double.parseDouble(p.getShapeArea()))
                .sum();

        double averageArea = 0.0;
        try {
            averageArea = PropertyGeometryUtils.calculateAverageArea(filteredProperties);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(panel, "No valid property areas found for calculation.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        tableModel.addRow(new Object[]{location, totalArea, averageArea});

        showResultsTable(tableModel, "Area Results");
    }

    /**
     * Displays a table with merged area details for the selected location.
     *
     * @param areaType The type of area (freguesia, municipio, ilha).
     * @param location The location name.
     * @param mergedProperties List of merged properties.
     */
    private void showMergedAreaTable(String areaType, String location, List<Property> mergedProperties) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("Location");
        tableModel.addColumn("Total Area (m²)");
        tableModel.addColumn("Average Area (m²)");

        double totalArea = mergedProperties.stream()
                .mapToDouble(p -> Double.parseDouble(p.getShapeArea()))
                .sum();

        double averageArea = 0.0;
        try {
            averageArea = PropertyGeometryUtils.calculateAverageArea(mergedProperties);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(panel, "No valid property areas found for calculation.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        tableModel.addRow(new Object[]{location, totalArea, averageArea});

        showResultsTable(tableModel, "Merged Area Results");
    }

    /**
     * Displays the results in a table format.
     *
     * @param tableModel The data model for the table.
     * @param title      The title of the results table.
     */
    private void showResultsTable(DefaultTableModel tableModel, String title) {
        JTable resultTable = new JTable(tableModel);
        resultTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (row % 2 == 0) {
                    comp.setBackground(new Color(240, 240, 240));
                } else {
                    comp.setBackground(Color.white);
                }
                return comp;
            }
        });

        JScrollPane scrollPane = new JScrollPane(resultTable);
        scrollPane.setPreferredSize(new java.awt.Dimension(600, 400));

        JOptionPane.showMessageDialog(panel, scrollPane, title, JOptionPane.INFORMATION_MESSAGE);
    }
    }
